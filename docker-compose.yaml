services:
  setup:
    profiles: [ "setup" ]
    image: keygen/api:v1.3.0
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      DISABLE_DATABASE_ENVIRONMENT_CHECK: "1"
    env_file:
    - .env
    command: >
      sh -c "
        until pg_isready -h postgres -U ${POSTGRES_USER}; do
          echo 'Waiting for PostgreSQL...'
          sleep 1
        done
        bundle exec rails keygen:setup
      "
    depends_on: [ "postgres" ]
    tty: true
    stdin_open: true

  upgrade:
    profiles: [ "upgrade" ]
    image: keygen/api:v1.3.0
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      DISABLE_DATABASE_ENVIRONMENT_CHECK: "1"
    env_file:
    - .env
    # It is named release, but it is actually for upgrade.
    # https://github.com/keygen-sh/keygen-api/blob/master/scripts/entrypoint.sh#L15-L18
    command: "release"
    depends_on: [ "postgres" ]
    tty: true
    stdin_open: true

  postgres:
    # Though the doc says it reuqires postgres 13
    # The source code is self is using 9.6
    # See https://github.com/keygen-sh/keygen-api/blob/master/docker-compose.yaml#L23
    # So I guess postgres 12 will work just fine.
    image: postgres:12
    ports:
    - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
    - postgres:/var/lib/postgresql/data

  redis:
    image: redis:6.2
    ports:
    - "6379:6379"
    volumes:
    - redis:/data

  web:
    image: keygen/api:v1.3.0
    ports:
    - "3000:3000"
    command: "web"
    env_file:
    - .env
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    volumes:
    - keygen:/etc/keygen
    depends_on:
    - postgres
    - redis

  worker:
    image: keygen/api:v1.3.0
    command: "worker"
    env_file:
    - .env
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    volumes:
    - keygen:/etc/keygen
    depends_on:
    - postgres
    - redis

  # keygen requires TLS connection.
  # It will redirect to https if X-Forwarded-Proto is not https.
  # To make it happy, we put a reverse proxy before it.
  nginx:
    image: nginx:1
    volumes:
    - ./nginx.conf:/etc/nginx/nginx.conf
    - ./tls.crt:/etc/nginx/conf.d/default.crt
    - ./tls.key:/etc/nginx/conf.d/default.key
    ports:
    - "80:80"
    - "443:443"

volumes:
  keygen:
  postgres:
  redis:
